#!/usr/bin/perl -w
#************************************************************************
#*   $Version:$
#*   Package	: xmt_util
#*   Synopsis	: slocs [-v] [-csv] [-f <filespec>] <dir> ...
#*   Purpose	: 
#*	Perform source code metrics counts on all files matching the 
#*	pattern <filespec> in each directory <dir> and all subdirectories 
#*	recursively.  If omitted, <filespec> defaults to "*"
#*	If [-v] is specified each file and its metrics is echoed to stdout.
#*	If [-csv] is specified metrics are output in csv format.
#*
#*  Copyright (c) 1998	Neumann & Associates Information Systems Inc.
#*  			legal.info@neumann-associates.com
#*  Licensed under the Apache License, Version 2.0 (the "License");
#*  you may not use this file except in compliance with the License.
#*  You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#*  
#*  Unless required by applicable law or agreed to in writing, software
#*  distributed under the License is distributed on an "AS IS" BASIS,
#*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#*  See the License for the specific language governing permissions and
#*  limitations under the License. 
#************************************************************************/

use Getopt::Long;
use Cwd;

($pgmname = $0) =~ s{.*/}{};
$usage		= "usage: $pgmname [-v] [-csv] [-f 'file pattern'] <dir>\n";
undef $opt_u; # unnecessary but shuts up -w
undef $opt_v; # unnecessary but shuts up -w
undef $opt_csv; # unnecessary but shuts up -w
$opt_f		= '*.[ch]';

GetOptions( "u", "v", "csv", "f=s" ) || die $usage;
die $usage if defined $opt_u;
die $usage if $#ARGV < 0;

$cmd = ( defined $opt_csv ? "sloc -csv" : "sloc" );

@dirs = @ARGV;		# initial directory list
while ( $#dirs >= 0 )
{
    $d = $dirs[0];
    @dirents = glob( "$d/*" );
    foreach $f ( @dirents )
    {
	push( @dirs, $f ) if ( -d $f && $f !~ /^\.+$/ );# append subdirs
    }
    printf( STDERR "scanning $d\n" ) if defined $opt_v;
    push( @srcs, glob("$d/$opt_f") );# append matching filenames to @srcs
    shift @dirs;
}

exit 0 if ($#srcs < 0);
open( CMD, "|$cmd" ) or die("$cmd: $!\n");	# spawn sloc cmd
foreach $f ( @srcs )
{
    if ( -T $f )
    {
	printf( STDERR "$f :\n" ) if defined $opt_v;
	open(BUF, $f) || warn("$f: $!\n");
	undef $/;
	$buf = <BUF>;			# read src file
	print CMD $buf;	 		# and write to sloc's stdin
	close(BUF);

	# if verbose, close & respawn sloc cmd for each file
	if ( defined $opt_v )
	{
	    close(CMD);
	    open( CMD, "|$cmd" ) or die("$cmd: $!\n");	# spawn sloc cmd
	}
    }
    else
    {
        printf( STDERR "ignoring binary file $f\n" );
    }
}

close(CMD);
exit 0;

